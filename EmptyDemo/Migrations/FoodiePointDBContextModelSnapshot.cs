// <auto-generated />
using System;
using EmptyDemo.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EmptyDemo.Migrations
{
    [DbContext(typeof(FoodiePointDBContext))]
    partial class FoodiePointDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EmptyDemo.Models.CategoryList", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Dessert"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Ice Cream"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Pizza"
                        });
                });

            modelBuilder.Entity("EmptyDemo.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscPer")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDiscAvail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpecial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVeg")
                        .HasColumnType("bit");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("categoryListCategoryId")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.HasIndex("categoryListCategoryId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            CategoryId = 1,
                            Contents = "abc, xyz",
                            DiscPer = 0,
                            IsDiscAvail = false,
                            IsSpecial = true,
                            IsVeg = true,
                            ItemDescription = "Classic for a get-together and you might not have any leftovers to bring home.",
                            ItemName = "Apple Pie",
                            Price = 200
                        },
                        new
                        {
                            ItemId = 2,
                            CategoryId = 1,
                            Contents = "abc, xyz",
                            DiscPer = 0,
                            IsDiscAvail = false,
                            IsSpecial = true,
                            IsVeg = true,
                            ItemDescription = "Classic for a get-together and you might not have any leftovers to bring home.",
                            ItemName = "Almond Malai Kulfi",
                            Price = 150
                        },
                        new
                        {
                            ItemId = 3,
                            CategoryId = 1,
                            Contents = "abc, xyz",
                            DiscPer = 5,
                            IsDiscAvail = true,
                            IsSpecial = false,
                            IsVeg = true,
                            ItemDescription = "Classic for a get-together and you might not have any leftovers to bring home.",
                            ItemName = "Lemon Tart",
                            Price = 200
                        },
                        new
                        {
                            ItemId = 4,
                            CategoryId = 3,
                            Contents = "abc, xyz",
                            DiscPer = 8,
                            IsDiscAvail = true,
                            IsSpecial = true,
                            IsVeg = true,
                            ItemDescription = "Classic for a get-together and you might not have any leftovers to bring home.",
                            ItemName = "Neapolitan Pizza",
                            Price = 200
                        },
                        new
                        {
                            ItemId = 5,
                            CategoryId = 3,
                            Contents = "abc, xyz",
                            DiscPer = 0,
                            IsDiscAvail = false,
                            IsSpecial = false,
                            IsVeg = true,
                            ItemDescription = "Classic for a get-together and you might not have any leftovers to bring home.",
                            ItemName = "abc, xyz",
                            Price = 150
                        },
                        new
                        {
                            ItemId = 6,
                            CategoryId = 3,
                            Contents = "abc, xyz",
                            DiscPer = 0,
                            IsDiscAvail = false,
                            IsSpecial = true,
                            IsVeg = false,
                            ItemDescription = "Classic for a get-together and you might not have any leftovers to bring home.",
                            ItemName = "Detroit Pizza",
                            Price = 200
                        },
                        new
                        {
                            ItemId = 7,
                            CategoryId = 2,
                            Contents = "abc, xyz",
                            DiscPer = 0,
                            IsDiscAvail = false,
                            IsSpecial = true,
                            IsVeg = true,
                            ItemDescription = "Classic for a get-together and you might not have any leftovers to bring home.",
                            ItemName = "Ben & Jerry's Chocolate Brownie Fudge",
                            Price = 200
                        },
                        new
                        {
                            ItemId = 8,
                            CategoryId = 2,
                            Contents = "abc, xyz",
                            DiscPer = 4,
                            IsDiscAvail = true,
                            IsSpecial = true,
                            IsVeg = true,
                            ItemDescription = "Classic for a get-together and you might not have any leftovers to bring home.",
                            ItemName = "Häagen-Dazs Vanilla",
                            Price = 150
                        },
                        new
                        {
                            ItemId = 9,
                            CategoryId = 2,
                            Contents = "abc, xyz",
                            DiscPer = 10,
                            IsDiscAvail = true,
                            IsSpecial = false,
                            IsVeg = true,
                            ItemDescription = "Classic for a get-together and you might not have any leftovers to bring home.",
                            ItemName = "Dove Mint Chocolate Chip Ice Cream",
                            Price = 200
                        });
                });

            modelBuilder.Entity("EmptyDemo.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EmptyDemo.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemRef")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShoppingCartItemid");

                    b.HasIndex("ItemId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("EmptyDemo.Models.Item", b =>
                {
                    b.HasOne("EmptyDemo.Models.CategoryList", "categoryList")
                        .WithMany("CategoryItems")
                        .HasForeignKey("categoryListCategoryId");

                    b.Navigation("categoryList");
                });

            modelBuilder.Entity("EmptyDemo.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("EmptyDemo.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("EmptyDemo.Models.CategoryList", b =>
                {
                    b.Navigation("CategoryItems");
                });
#pragma warning restore 612, 618
        }
    }
}
